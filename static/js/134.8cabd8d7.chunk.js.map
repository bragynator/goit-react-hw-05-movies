{"version":3,"file":"static/js/134.8cabd8d7.chunk.js","mappings":"8PAMe,SAASA,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRJ,EAAaK,IAAI,UAAYX,EAASM,EAAaK,IAAI,SACxD,GAAE,CAACL,KAEJI,EAAAA,EAAAA,YAAU,WACJX,IACFK,GAAa,IACbQ,EAAAA,EAAAA,IAAuBb,GACpBc,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACgB,IAAnBA,EAAQC,QAKZR,EAAgB,CAAER,MAAAA,IAClBG,EAAUY,IALRE,EAAAA,GAAAA,MAAA,uDAMH,IACAC,SAAQ,kBAAMb,GAAa,EAAnB,IAEd,GAAE,CAACL,EAAOQ,IAgBX,OACE,iCACE,kBAAMW,SAhBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMrB,EAAQoB,EAAEE,cAAcC,SAASvB,MAAMwB,MAAMC,OAEnD,GAAc,KAAVzB,EAGF,OAFAiB,EAAAA,GAAAA,KAAW,gDACXG,EAAEE,cAAcI,QAIlBzB,EAASD,GACToB,EAAEE,cAAcI,OACjB,EAIG,WACE,kBACEC,KAAK,OACLC,KAAK,QACLC,YAAY,2BACZC,aAAa,SAEf,mBAAQH,KAAK,SAASI,SAAU3B,EAAhC,uBAKDA,GACC,SAAC,IAAD,KAEA,wBACqB,IAAlBF,EAAOc,QACNd,EAAO8B,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MAChB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAM5B,GAA1C,SACGyB,KAFID,EAMZ,QAKZ,C,uJChFD,IAAMK,EAAU,mCAEHC,EAAoB,kBAC/BC,MAAM,6DAAD,OACmDF,IAAWxB,MAAK,SAAA2B,GAAC,OACvEA,EAAEC,MADqE,GAF1C,EAMpB7B,EAAyB,SAAAb,GAAK,OACzCwC,MAAM,qDAAD,OACkDF,EADlD,kBACmEtC,IACtEc,MAAK,SAAA2B,GAAC,OAAIA,EAAEC,MAAN,GAHiC,EAK9BC,EAAe,SAAAC,GAAO,OACjCJ,MAAM,sCAAD,OACmCI,EADnC,oBACsDN,IACzDxB,MAAK,SAAA2B,GAAC,OAAIA,EAAEC,MAAN,GAHyB,EAKtBG,EAAe,SAAAD,GAAO,OACjCJ,MAAM,sCAAD,OACmCI,EADnC,4BAC8DN,IACjExB,MAAK,SAAA2B,GAAC,OAAIA,EAAEC,MAAN,GAHyB,EAKtBI,EAAkB,SAAAF,GAAO,OACpCJ,MAAM,sCAAD,OACmCI,EADnC,4BAC8DN,IACjExB,MAAK,SAAA2B,GAAC,OAAIA,EAAEC,MAAN,GAH4B,C","sources":["pages/Movies.jsx","services/moviesApi.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Spinner } from 'components/Spinner';\nimport { getMoviesBySearchQuery } from 'services/moviesApi';\n\nexport default function Movies() {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    searchParams.get('query') && setQuery(searchParams.get('query'));\n  }, [searchParams]);\n\n  useEffect(() => {\n    if (query) {\n      setIsLoading(true);\n      getMoviesBySearchQuery(query)\n        .then(({ results }) => {\n          if (results.length === 0) {\n            toast.error(`We didn't find anything! Please, check your request!`);\n            return;\n          }\n\n          setSearchParams({ query });\n          setMovies(results);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [query, setSearchParams]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const query = e.currentTarget.elements.query.value.trim();\n\n    if (query === '') {\n      toast.warn('Your request is empty! Enter something!');\n      e.currentTarget.reset();\n      return;\n    }\n\n    setQuery(query);\n    e.currentTarget.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"Enter the search request\"\n          autoComplete=\"off\"\n        />\n        <button type=\"submit\" disabled={isLoading}>\n          Search\n        </button>\n      </form>\n\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <ul>\n          {movies.length !== 0 &&\n            movies.map(({ id, title }) => {\n              return (\n                <li key={id}>\n                  <Link to={`/movies/${id}`} state={{ from: location }}>\n                    {title}\n                  </Link>\n                </li>\n              );\n            })}\n        </ul>\n      )}\n    </>\n  );\n}\n","const API_KEY = 'fadee9dfff8cb6b1bff36771479589d6';\n\nexport const getTrendingMovies = () =>\n  fetch(`\nhttps://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`).then(r =>\n    r.json()\n  );\n\nexport const getMoviesBySearchQuery = query =>\n  fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`\n  ).then(r => r.json());\n\nexport const getMovieById = movieId =>\n  fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}`\n  ).then(r => r.json());\n\nexport const getMovieCast = movieId =>\n  fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}`\n  ).then(r => r.json());\n\nexport const getMovieReviews = movieId =>\n  fetch(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}`\n  ).then(r => r.json());\n"],"names":["Movies","useState","query","setQuery","movies","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","location","useLocation","useEffect","get","getMoviesBySearchQuery","then","results","length","toast","finally","onSubmit","e","preventDefault","currentTarget","elements","value","trim","reset","type","name","placeholder","autoComplete","disabled","map","id","title","to","state","from","API_KEY","getTrendingMovies","fetch","r","json","getMovieById","movieId","getMovieCast","getMovieReviews"],"sourceRoot":""}